generator client {
  provider = "prisma-client-js"
}

// for local dev
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//for production
// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tokens     SMSToken[]
  products   Product[]
  posts      Post[]
  Comments   Comment[]
  Likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]
  Loves      Love[]
}

model SMSToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //Relation: userId in SMSToken refers to id in User model
  //ondelete: allows deleting if parent is deleted (cascade), setnull: only if relation is optional
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //what actually is stored in DB (masked as userID by Prisma)
  userId    Int
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  price       Float
  description String
  photo       String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID      Int
  status      Boolean @default(true) //true for not sold and false for sold

  chat_room ChatRoom[]
  loves     Love[]
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  views       Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  //only User can like a post once
  //combination of userId, postId is unique
  @@id(name: "id", [userId, postId])
}

model Love {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     Int
  productId  Int

  //only User can like a post once
  //combination of userId, postId is unique
  @@id(name: "id", [userId, productId])
}

model ChatRoom {
  id       String    @id @default(cuid())
  users    User[]
  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  chatRoomId String
  userId     Int
}
